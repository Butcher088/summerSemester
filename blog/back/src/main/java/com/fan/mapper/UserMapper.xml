<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fan.mapper.UserMapper">

    <select id="login" resultType="com.fan.entity.User">
        SELECT *
        FROM user
        WHERE userName = #{userName}
          AND passWord = #{passWord}
    </select>

    <select id="selectByName" resultType="com.fan.entity.User">
        SELECT * FROM user WHERE userName=#{userName}
    </select>

    <select id="selectById" resultType="com.fan.entity.User">
        SELECT * FROM user WHERE user_id=#{userId}
    </select>

    <insert id="insertUser" parameterType="com.fan.entity.User">
        insert into user(user_id,userName,passWord) values (#{userId},#{userName},#{passWord})
    </insert>

    <select id="getCount" resultType="Integer">
        SELECT COUNT(1) FROM user
    </select>

    <update id="updateAll" parameterType="com.fan.entity.User">
        UPDATE user set userName=#{userName}, passWord=#{passWord},email=#{email},phone=#{phone},img=#{img} where user_id = #{userId}
    </update>

    <select id="getAllUser" resultType="com.fan.entity.User">
        SELECT * FROM user
    </select>



    <resultMap type="com.fan.entity.User" id="UserResult">
        <result property="userId"    column="user_id"    />
        <result property="userName"    column="userName"    />
        <result property="passWord"    column="passWord"    />
        <result property="profilePhoto"    column="profile_photo"    />
        <result property="role"    column="role"    />
        <result property="registTime"    column="regist_time"    />
        <result property="email"    column="email"    />
        <result property="phone"    column="phone"    />
        <result property="img"    column="img"    />
        <result property="position"    column="position"    />
    </resultMap>

    <sql id="selectUserVo">
        select user_id, userName, passWord, profile_photo, role, regist_time, email, phone, img, position from user
    </sql>

    <select id="selectUserList" parameterType="com.fan.entity.User" resultMap="UserResult">
        <include refid="selectUserVo"/>
        <where>
            <if test="userName != null  and userName != ''"> and userName like concat('%', #{userName}, '%')</if>
            <if test="userName != null  and passWord != ''"> and passWord = #{passWord}</if>
            <if test="profilePhoto != null  and profilePhoto != ''"> and profile_photo = #{profilePhoto}</if>
            <if test="role != null  and role != ''"> and role = #{role}</if>
            <if test="registTime != null "> and regist_time = #{registTime}</if>
            <if test="email != null  and email != ''"> and email = #{email}</if>
            <if test="phone != null  and phone != ''"> and phone = #{phone}</if>
            <if test="img != null  and img != ''"> and img = #{img}</if>
            <if test="position != null  and position != ''"> and position = #{position}</if>
        </where>
    </select>

    <select id="selectUserByUserId" parameterType="Long" resultMap="UserResult">
        <include refid="selectUserVo"/>
        where user_id = #{userId}
    </select>

    <update id="updateUser" parameterType="com.fan.entity.User">
        update user
        <trim prefix="SET" suffixOverrides=",">
            <if test="userName != null and userName != ''">userName = #{userName},</if>
            <if test="passWord != null and passWord != ''">passWord = #{passWord},</if>
            <if test="profilePhoto != null">profile_photo = #{profilePhoto},</if>
            <if test="role != null || role != 0">role = #{role},</if>
            <if test="registTime != null">regist_time = #{registTime},</if>
            <if test="email != null">email = #{email},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="img != null">img = #{img},</if>
            <if test="position != null">position = #{position},</if>
        </trim>
        where user_id = #{userId}
    </update>

    <delete id="deleteUserByUserId" parameterType="Long">
        delete from user where user_id = #{userId}
    </delete>

    <delete id="deleteUserByUserIds" parameterType="String">
        delete from user where user_id in
        <foreach item="userId" collection="array" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </delete>
</mapper>
